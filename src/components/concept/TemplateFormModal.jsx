import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useData } from '@/context/DataContext';
import { createConceptTemplate } from '@/data/models'; // We'll use this if creating a new one

const TemplateFormModal = ({ open, onOpenChange, templateToEdit, onSave }) => {
  const [name, setName] = useState('');
  // templateData fields
  const [templateNameField, setTemplateNameField] = useState(''); // Name field within templateData
  const [aliases, setAliases] = useState(''); // Comma-separated
  const [tags, setTags] = useState(''); // Comma-separated
  const [description, setDescription] = useState('');
  const [notes, setNotes] = useState('');
  const [priority, setPriority] = useState(0);
  const [image, setImage] = useState(''); // Base64 string or URL

  useEffect(() => {
    if (templateToEdit) {
      setName(templateToEdit.name || '');
      setTemplateNameField(templateToEdit.templateData?.name || '');
      setAliases((templateToEdit.templateData?.aliases || []).join(', '));
      setTags((templateToEdit.templateData?.tags || []).join(', '));
      setDescription(templateToEdit.templateData?.description || '');
      setNotes(templateToEdit.templateData?.notes || '');
      setPriority(templateToEdit.templateData?.priority || 0);
      setImage(templateToEdit.templateData?.image || '');
    } else {
      // Reset for new template
      setName('');
      setTemplateNameField('');
      setAliases('');
      setTags('');
      setDescription('');
      setNotes('');
      setPriority(0);
      setImage('');
    }
  }, [templateToEdit, open]); //Rerun if modal is opened or templateToEdit changes

  const handleSubmit = () => {
    const templatePayload = {
      id: templateToEdit?.id, // Keep ID if editing, else it will be generated by createConceptTemplate or onSave
      name: name.trim(),
      templateData: {
        name: templateNameField.trim() || undefined, // Store as undefined if empty, so it doesn't override concept name
        aliases: aliases.split(',').map(s => s.trim()).filter(s => s),
        tags: tags.split(',').map(s => s.trim()).filter(s => s),
        description: description.trim(),
        notes: notes.trim(),
        priority: parseInt(priority, 10) || 0,
        image: image.trim() || null,
      },
      // isDefault and creation_date will be handled by onSave or are inherent to templateToEdit
      last_modified_date: Date.now(),
    };
    onSave(templatePayload);
    onOpenChange(false); // Close modal after save
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>{templateToEdit ? 'Edit Concept Template' : 'Create New Concept Template'}</DialogTitle>
          <DialogDescription>
            {templateToEdit ? 'Modify the details of this concept template.' : 'Define a new template for creating concepts.'}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="template-display-name" className="text-right">Template Name*</Label>
            <Input id="template-display-name" value={name} onChange={(e) => setName(e.target.value)} className="col-span-3" placeholder="Display Name (e.g., Character, Location)" />
          </div>
          
          <p className="text-sm text-muted-foreground col-span-full pt-2 pb-1">Pre-filled Concept Fields:</p>

          <div className="grid grid-cols-[max-content_1fr] items-center gap-x-3 gap-y-2">
            <Label htmlFor="template-concept-name" className="text-right whitespace-nowrap">Name</Label>
            <Input id="template-concept-name" value={templateNameField} onChange={(e) => setTemplateNameField(e.target.value)} placeholder="Default Concept Name (optional)" />
          </div>
          <div className="grid grid-cols-[max-content_1fr] items-center gap-x-3 gap-y-2">
            <Label htmlFor="template-aliases" className="text-right whitespace-nowrap">Aliases</Label>
            <Input id="template-aliases" value={aliases} onChange={(e) => setAliases(e.target.value)} placeholder="e.g., Seer, Prophet (comma-separated)" />
          </div>
          <div className="grid grid-cols-[max-content_1fr] items-center gap-x-3 gap-y-2">
            <Label htmlFor="template-tags" className="text-right whitespace-nowrap">Tags</Label>
            <Input id="template-tags" value={tags} onChange={(e) => setTags(e.target.value)} placeholder="e.g., protagonist, magical (comma-separated)" />
          </div>
          <div className="grid grid-cols-[max-content_1fr] items-center gap-x-3 gap-y-2">
            <Label htmlFor="template-priority" className="text-right whitespace-nowrap">Priority</Label>
            <Input id="template-priority" type="number" value={priority} onChange={(e) => setPriority(e.target.value)} />
          </div>
          
          {/* Description and Notes remain full width */}
          <div className="grid grid-cols-1 gap-y-1 mt-2">
            <Label htmlFor="template-description">Description (Pre-filled)</Label>
            <Textarea id="template-description" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Default description for concepts using this template." rows={3}/>
          </div>
          <div className="grid grid-cols-1 gap-y-1 mt-2">
            <Label htmlFor="template-notes">Notes (Pre-filled)</Label>
            <Textarea id="template-notes" value={notes} onChange={(e) => setNotes(e.target.value)} placeholder="Default notes for concepts using this template." rows={2}/>
          </div>

          <div className="grid grid-cols-[max-content_1fr] items-center gap-x-3 gap-y-2 mt-2">
            <Label htmlFor="template-image" className="text-right whitespace-nowrap">Image URL</Label>
            <Input id="template-image" value={image} onChange={(e) => setImage(e.target.value)} placeholder="Optional: Default image URL or Base64" />
          </div>
        </div>
        <DialogFooter>
          <DialogClose asChild>
            <Button type="button" variant="outline">Cancel</Button>
          </DialogClose>
          <Button type="submit" onClick={handleSubmit} disabled={!name.trim()}>Save Template</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default TemplateFormModal;
